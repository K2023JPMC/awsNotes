AWS Key Management Service (KMS)

Purpose:

* Manages encryption keys used to encrypt and decrypt data.

Key Features

1. Encryption Key Management:
    - Create, store, and control cryptograhic keys ( symmetric and asymmetric keys).
    - Keys are used for encrypting files, databases, or other secrets but are not used to store secret themselves
2. Encryption Operations:
    - Enables encrytion and decryption operations directly or via integration with other AWS service like S3, EBS, RDS and Lambda
    - KMS doesnt store your secrets, but rateher secures them by encryoting the data.
3. Complicane and Secuirty
    - Integrated with AWS CloudTrail for monitoring
    - Offers centralized control for compliance with regulatory standards
4. Use Cases:
    - Encrypting S3 Buckets.
    - Protecting database credentials in RDS or other AWS services 
    - Diigtal signature verfification with aysmmetric keys
5. Charged based on key usage, including encrption and decryption operations.


AWS Secrets Manager

Purpose:

* Manage secrets like database credentials, API keys, and other sensitive configuration details.

Key Features:

1. Secret Storage and Rotation
  - Securly stores secrets and rotates them automatically without disrupting applications.
  - Supports secret like usernames, passwords, tokens, and API keys
2. Integration
  - Works with databases (RDS, Refshift) , custom applcaitons, and other services.
  - Provides SDKs APISs to retrieve secrets programmatically 
3. Secret Lifecycle Manangerment
  - Allow periodic automatic secret rotation using Lambda functions or custom rotation logic.
  - Enable versioing of secrets
4. Access Control:
  - Secrets are encrupted with KMS under the hood but are stored and treive as complete objects
  - Fine-grained access control using IAM policies.
5. Use Cases:
  - Storing database credentials or API keys.
  - Automationg the rotation of sensitive data like database passwords.
6. Charged per secret stored and per API request made to retrieve or manage secrets.

How Certificates Work in AWS Secrets Manager
AWS Secrets Manager is used to securely store sensitive data, including 

-certificates, 
-private keys, 
-and related metadata.

What Secrets Manager Stores:

Private Key: The private part of the certificate (e.g., PEM-encoded key).
Certificate (Public Key): The public certificate that corresponds to the private key.
Certificate Chain: The chain of intermediate certificates up to the root certificate (if applicable).
Metadata: Information such as the certificate's expiration date, purpose, or associated domains.
How It Works with Certificates:

Storage:
You store the certificate, private key, and chain as a single JSON or string object. For example:
{
  "certificate": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----",
  "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----",
  "chain": "-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----"
}
Access:
Applications can retrieve certificates programmatically via the AWS SDK or API.
The secrets are encrypted using a KMS key before storage, ensuring secure access.
Rotation:
AWS Secrets Manager can automatically rotate certificates using a custom Lambda function. This is particularly useful for certificates that expire frequently or need to be updated periodically.
Use Cases:
Securely storing SSL/TLS certificates for web applications.
Storing client certificates used in API authentication.
Rotating certificates automatically to avoid expiration.

========================================================

1. AWS KMS with RDS
Purpose:
AWS KMS manages the encryption keys used to encrypt the underlying storage for RDS instances. This ensures that data at rest is secure.

How KMS Works with RDS:

Encryption of Data at Rest:
When creating an RDS instance, you can enable encryption by specifying a KMS key.
The KMS key encrypts the data stored on the instanceâ€™s underlying storage, including automated backups, read replicas, and snapshots.
Key Management:
KMS allows you to control access to encryption keys using IAM policies.
You can create Customer Managed Keys (CMKs) for specific use cases or use AWS-managed keys for simplicity.
Decryption During Use:
When data is read from the database, it is automatically decrypted using the KMS key. This happens seamlessly without requiring user intervention.
Compliance and Auditing:
RDS integrates with AWS CloudTrail to log key usage, helping with compliance requirements.
Use Cases:

Encrypting sensitive databases (e.g., financial, healthcare data).
Meeting compliance standards (e.g., GDPR, HIPAA).
Restricting who can start, stop, or snapshot RDS instances by controlling KMS key access.
2. AWS Secrets Manager with RDS
Purpose:
Secrets Manager securely stores and manages credentials (usernames and passwords) for accessing RDS databases. It can also automate credential rotation.

How Secrets Manager Works with RDS:

Storage of Database Credentials:
Secrets Manager stores the database username and password securely.
Secrets are encrypted using a KMS key (Customer Managed or AWS-managed).
Automated Credential Rotation:
Secrets Manager can rotate RDS credentials automatically without impacting application access.
When rotation is enabled, Secrets Manager updates the database with a new password and synchronizes it with the stored secret.
Access Management:
Applications retrieve credentials programmatically using the AWS SDK, CLI, or API.
Secrets Manager ensures only authorized IAM entities can access the credentials.
Integration:
Secrets Manager integrates seamlessly with RDS, enabling easy rotation for MySQL, PostgreSQL, SQL Server, Oracle, and MariaDB.
During rotation, Secrets Manager updates the database credentials and tests the new credentials to ensure they work.
Use Cases:

Securely storing and retrieving RDS credentials.
Enforcing frequent rotation of database passwords.
Reducing the risk of hard-coded credentials in applications.
3. Combined Workflow: RDS, KMS, and Secrets Manager
How They Work Together:

Data Encryption with KMS:
When you create an RDS instance, enable encryption using a KMS key.
The KMS key encrypts the database storage and backups.
Credential Management with Secrets Manager:
Store the database credentials in Secrets Manager.
Configure Secrets Manager to automatically rotate credentials for the RDS instance.
Application Access:
Applications retrieve the database credentials from Secrets Manager at runtime.
The database automatically handles encrypted storage and decryption via the KMS key.
Security and Access Control:
IAM policies control who can access KMS keys and Secrets Manager secrets.
RDS ensures encrypted communication via SSL/TLS for secure data transit.
Example Workflow:
Set Up RDS with KMS:
Create an RDS instance with encryption enabled using a KMS key.
The KMS key encrypts all data at rest (storage, backups, snapshots).
Store Credentials in Secrets Manager:
Store the database username and password as a secret in Secrets Manager.
Use a Customer Managed KMS key to encrypt the secret.
Application Access:
The application retrieves the database credentials from Secrets Manager via an API call.
The secret is decrypted using the KMS key managed by Secrets Manager.
Credential Rotation:
Enable Secrets Manager's automatic rotation for the stored credentials.
During rotation, Secrets Manager:
Generates a new password.
Updates the RDS instance with the new password.
Updates the secret in Secrets Manager.
Key Benefits of This Integration:
Security: Protects data at rest (via KMS) and sensitive credentials (via Secrets Manager).
Automation: Reduces manual effort by automating credential rotation and ensuring seamless integration between services.
Compliance: Meets regulatory requirements for data encryption and access management.
Scalability: Easily manage credentials and encryption across multiple RDS instances and applications.

=============================================
